{
  "version": 3,
  "sources": ["../src/elements/calendar.ts", "../src/utilities/handle-form-button.ts", "../src/utilities/format-from-calendar.ts", "../src/utilities/format-from-form.ts", "../src/utilities/format-task.ts", "../src/utilities/get-tasks.ts", "../src/utilities/set-tasks.ts", "../src/main.ts"],
  "sourcesContent": ["export interface DayDataSet extends DOMStringMap {\n  date: string;\n  month: string;\n  year: string\n  monthName: string\n}\n\ninterface DayCell extends HTMLTableCellElement {\n  dataset: DayDataSet\n}\n\ntype DayFnMapper = <T extends DayCell>(cell: T) => void\n\nexport class CalendarElement extends HTMLElement {\n  today = new Date()\n  currentMonth = this.today.getMonth()\n  currentYear = this.today.getFullYear()\n\n  monthAndYear: HTMLHeadingElement\n\n  buttonPrevious: HTMLButtonElement\n  buttonNext: HTMLButtonElement\n\n  selectYear: HTMLSelectElement\n  selectMonth: HTMLSelectElement\n\n  calendar: HTMLTableElement\n  lang: string\n\n  selectableDays: NodeListOf<DayCell>\n\n  currentDayData: DayDataSet\n\n  dayFnMapper: DayFnMapper\n\n  months: string[] = []\n  days: string[] = []\n\n  monthDefault = [\n    'Janeiro',\n    'Fevereiro',\n    'Mar\u00E7o',\n    'Abril',\n    'Maio',\n    'Junho',\n    'Julho',\n    'Agosto',\n    'Setembro',\n    'Outubro',\n    'Novembro',\n    'Dezembro',\n  ]\n  dayDefault = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']\n\n  connectedCallback() {\n    const shadow = this.attachShadow({ mode: 'open' })\n    const template = document.createElement('template')\n    template.innerHTML = `<link rel=\"stylesheet\" href=\"styles/button.css\" />\n    <link rel=\"stylesheet\" href=\"styles/calendar.css\" />\n    \n    \n    <div class=\"button-container-calendar\">\n      <button id=\"previous\">&#8249;</button>\n      <h3 id=\"month-and-year\"></h3>\n      <button id=\"next\">&#8250;</button>\n    </div>\n  \n    <table class=\"table-calendar\" id=\"calendar\" data-lang=\"pt-br\">\n      <thead id=\"thead-month\"></thead>\n      <tbody id=\"calendar-body\"></tbody>\n    </table>\n  \n    <div class=\"footer-container-calendar\">\n      <label for=\"month\">Ir para: </label>\n      <select id=\"month\"></select>\n      <select id=\"year\"></select>\n    </div>`\n    \n    shadow.appendChild(template.content.cloneNode(true))\n\n    this.monthAndYear = this.shadowRoot.querySelector('#month-and-year')\n\n    this.buttonPrevious = this.shadowRoot.querySelector('#previous')\n    this.buttonNext = this.shadowRoot.querySelector('#next')\n\n    this.selectYear = this.shadowRoot.querySelector('#year')\n    this.selectMonth = this.shadowRoot.querySelector('#month')\n\n    this.calendar = this.shadowRoot.querySelector('#calendar')\n    this.lang = this.calendar.dataset.lang\n\n    this.monthDefault.forEach((m, i) => {\n      this.selectMonth.add(new Option(m, `${i}`))\n    })\n    this.generateYearRange(1970, 2030)\n\n    this.buttonPrevious.onclick = this.previous()\n    this.buttonNext.onclick = this.next()\n\n    this.selectMonth.onchange = this.jump()\n    this.selectYear.onchange = this.jump()\n\n    if (this.lang === 'pt-br') {\n      this.months = this.monthDefault\n      this.days = this.dayDefault\n    }\n\n    const thead = this.calendar.createTHead()\n    const theadRow = thead.insertRow()\n\n    this.days.forEach((value, index) => {\n      const th = theadRow.insertCell()\n      th.dataset.days = index.toString()\n      th.textContent = value\n    })\n\n    this.showCalendar(this.currentMonth, this.currentYear)\n\n    this.dayFnMapper = (day) => {\n      const detail = day.dataset\n      const event = new CustomEvent('selected', { detail })\n      this.dispatchEvent(event)\n    }\n  }\n\n  previous() {\n    return () => {\n      this.currentYear =\n        this.currentMonth === 0 ? this.currentYear - 1 : this.currentYear\n      this.currentMonth = this.currentMonth === 0 ? 11 : this.currentMonth - 1\n\n      this.showCalendar(this.currentMonth, this.currentYear)\n    }\n  }\n\n  next() {\n    return () => {\n      this.currentYear =\n        this.currentMonth === 11 ? this.currentYear + 1 : this.currentYear\n      this.currentMonth = (this.currentMonth + 1) % 12\n\n      this.showCalendar(this.currentMonth, this.currentYear)\n    }\n  }\n\n  jump() {\n    return () => {\n      this.currentYear = +this.selectYear.value\n      this.currentMonth = +this.selectMonth.value\n\n      this.showCalendar(this.currentMonth, this.currentYear)\n    }\n  }\n\n  private attachListeners() {\n    const tbody = this.calendar.querySelector('tbody')\n    this.selectableDays = tbody.querySelectorAll('td.date-picker')\n    this.selectableDays.forEach((day) => {\n      day.addEventListener('click', () => this.dayFnMapper(day))\n    })\n  }\n\n  private detachListeners() {\n    if (this.selectableDays) {\n      this.selectableDays.forEach(day => {\n        day.removeEventListener('click', () => this.dayFnMapper(day))\n      })\n    }\n  }\n\n  private showCalendar(month: number, year: number) {\n    const firstDay = new Date(year, month).getDay()\n\n    this.detachListeners()\n\n    const tbody = this.calendar.querySelector('tbody')\n    tbody.innerHTML = ''\n\n    this.monthAndYear.textContent = `${this.months[month]} ${year}`\n    this.selectYear.value = `${year}`\n    this.selectMonth.value = `${month}`\n\n    let date = 1\n    for (let calendarRow = 0; calendarRow < 6; calendarRow++) {\n      const row = tbody.insertRow()\n\n      for (let calendarCol = 0; calendarCol < 7; calendarCol++) {\n        if (calendarRow === 0 && calendarCol < firstDay) {\n          row.insertCell()\n        } else if (date > this.daysInMonth(month, year)) {\n          break\n        } else {\n          const cell = row.insertCell()\n\n          cell.dataset.date = `${date}`\n          cell.dataset.month = `${month + 1}`\n          cell.dataset.year = `${year}`\n          cell.dataset.monthName = `${this.months[month]}`\n          cell.textContent = `${date}`\n\n          cell.classList.add('date-picker')\n\n          if (\n            date === this.today.getDate() &&\n            year === this.today.getFullYear() &&\n            month === this.today.getMonth()\n          ) {\n            cell.classList.add('date-picker', 'selected')\n          }\n\n          date++\n        }\n      }\n    }\n\n    this.attachListeners()\n  }\n\n  private daysInMonth(iMonth: number, iYear: number) {\n    return 32 - new Date(iYear, iMonth, 32).getDate()\n  }\n\n  private generateYearRange(start: number, end: number) {\n    for (let year = start; year <= end; year++) {\n      this.selectYear.add(new Option(`${year}`, `${year}`))\n    }\n  }\n}\n\ncustomElements.define('boot-calendar', CalendarElement)\n", "export function handleFormButton(form: HTMLFormElement) {\n  const button = form.querySelector('button')\n  if (button) button.disabled = true\n\n  form.onchange = () => {\n    const valid = !form.checkValidity()\n    if (button) button.disabled = valid\n  }\n}", "import { DayDataSet } from '../elements/calendar'\n\nexport function formatFromCalendar(value: DayDataSet) {\n  const { year, month, date } = value\n\n  const d = date.length === 1 ? `0${date}` : date\n  const m = month.length === 1 ? `0${month}` : month\n\n  return `${year}-${m}-${d}`\n}\n", "export function formatFromForm(value: string) {\n  const [year, month, day] = value.split('-')\n  return `${year}-${month}-${day}`\n}\n", "import { TaskItem } from '../interfaces/task-item'\n\nexport function formatTask(data: FormData): TaskItem {\n  const value = Object.fromEntries(data.entries())\n  return value as unknown as TaskItem\n}\n", "import { formatFromForm } from './format-from-form'\nimport { TaskItem } from '../interfaces/task-item'\n\nexport function getTasks(date: string): TaskItem[] {\n  const key = formatFromForm(date)\n  const tasks = localStorage.getItem(key)\n\n  return tasks ? JSON.parse(tasks) : []\n}\n", "import { formatFromForm } from './format-from-form'\nimport { formatTask } from './format-task'\nimport { getTasks } from './get-tasks'\n\nexport function setTasks(data: FormData) {\n  const key = formatFromForm(data.get('date').toString())\n\n  const tasks = getTasks(key)\n  tasks.push(formatTask(data))\n\n  localStorage.setItem(key, JSON.stringify(tasks))\n}\n", "import { DayDataSet, CalendarElement } from './elements/calendar'\nimport { handleFormButton } from './utilities/handle-form-button'\nimport { formatFromCalendar } from './utilities'\nimport { setTasks } from './utilities/set-tasks'\nimport { getTasks } from './utilities/get-tasks'\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const form = document.querySelector('form')\n\n  /**\n   * Form\n   */\n  if (form) {\n    handleFormButton(form)\n\n    form.onsubmit = (ev) => {\n      ev.preventDefault()\n\n      // Salva tarefa cadastrada\n      setTasks(new FormData(form))\n    }\n  }\n\n  /**\n   * Calendar\n   */\n  const calendar = document.querySelector('boot-calendar')\n  calendar.addEventListener(\n    'selected',\n    ({ detail }: CustomEvent<DayDataSet>) => {\n      const inputDate = form.querySelector<HTMLInputElement>('#date')\n\n      // Verifica se tem tarefas pra este dia\n      // e retorna uma lista, mesmo que vazia\n      const tasks = getTasks(formatFromCalendar(detail))\n\n      console.log(tasks)\n\n      // Preenche o campo de data do form\n      inputDate.value = formatFromCalendar(detail)\n    }\n  )\n})\n\ncustomElements.whenDefined('boot-calendar').then(() => {})\n\nexport { CalendarElement }\n"],
  "mappings": "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",
  "names": []
}
